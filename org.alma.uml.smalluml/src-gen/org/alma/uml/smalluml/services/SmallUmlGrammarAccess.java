/*
 * generated by Xtext 2.10.0
 */
package org.alma.uml.smalluml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallUmlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cClassAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cClassClassParserRuleCall_1_0_0 = (RuleCall)cClassAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRelationAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRelationRelationParserRuleCall_2_0_0 = (RuleCall)cRelationAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Package:
		//	{Package} (class+=Class ';')* (relation+=Relation ';')* (types+=Type ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Package} (class+=Class ';')* (relation+=Relation ';')* (types+=Type ';')*
		public Group getGroup() { return cGroup; }
		
		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }
		
		//(class+=Class ';')*
		public Group getGroup_1() { return cGroup_1; }
		
		//class+=Class
		public Assignment getClassAssignment_1_0() { return cClassAssignment_1_0; }
		
		//Class
		public RuleCall getClassClassParserRuleCall_1_0_0() { return cClassClassParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//(relation+=Relation ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//relation+=Relation
		public Assignment getRelationAssignment_2_0() { return cRelationAssignment_2_0; }
		
		//Relation
		public RuleCall getRelationRelationParserRuleCall_2_0_0() { return cRelationRelationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(types+=Type ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0_0() { return cTypesTypeParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConcreteTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Enumeration | ConcreteType;
		@Override public ParserRule getRule() { return rule; }
		
		//Enumeration | ConcreteType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_0() { return cEnumerationParserRuleCall_0; }
		
		//ConcreteType
		public RuleCall getConcreteTypeParserRuleCall_1() { return cConcreteTypeParserRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cParentsClassCrossReference_3_1_0 = (CrossReference)cParentsAssignment_3_1.eContents().get(0);
		private final RuleCall cParentsClassIDTerminalRuleCall_3_1_0_1 = (RuleCall)cParentsClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cParentsClassCrossReference_3_2_1_0 = (CrossReference)cParentsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cParentsClassIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cParentsClassCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAttributesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_5_2_0 = (RuleCall)cAttributesAssignment_5_2.eContents().get(0);
		private final Assignment cAttributesAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_5_3_0 = (RuleCall)cAttributesAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMethodsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMethodsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMethodsMethodParserRuleCall_6_2_0 = (RuleCall)cMethodsAssignment_6_2.eContents().get(0);
		private final Assignment cMethodsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cMethodsMethodParserRuleCall_6_3_0 = (RuleCall)cMethodsAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	isAbstract?='Abstract'?
		//	'Class'
		//	name=ID ('extends' parents+=[Class] ("," parents+=[Class])*)?
		//	'{' ('attributes' '{' attributes+=Attribute attributes+=Attribute* '}')? ('methods' '{' methods+=Method
		//	methods+=Method* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='Abstract'? 'Class' name=ID ('extends' parents+=[Class] ("," parents+=[Class])*)? '{' ('attributes' '{'
		//attributes+=Attribute attributes+=Attribute* '}')? ('methods' '{' methods+=Method methods+=Method* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='Abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'Abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'Class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' parents+=[Class] ("," parents+=[Class])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//parents+=[Class]
		public Assignment getParentsAssignment_3_1() { return cParentsAssignment_3_1; }
		
		//[Class]
		public CrossReference getParentsClassCrossReference_3_1_0() { return cParentsClassCrossReference_3_1_0; }
		
		//ID
		public RuleCall getParentsClassIDTerminalRuleCall_3_1_0_1() { return cParentsClassIDTerminalRuleCall_3_1_0_1; }
		
		//("," parents+=[Class])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parents+=[Class]
		public Assignment getParentsAssignment_3_2_1() { return cParentsAssignment_3_2_1; }
		
		//[Class]
		public CrossReference getParentsClassCrossReference_3_2_1_0() { return cParentsClassCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getParentsClassIDTerminalRuleCall_3_2_1_0_1() { return cParentsClassIDTerminalRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('attributes' '{' attributes+=Attribute attributes+=Attribute* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'attributes'
		public Keyword getAttributesKeyword_5_0() { return cAttributesKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_2() { return cAttributesAssignment_5_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_2_0() { return cAttributesAttributeParserRuleCall_5_2_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5_3() { return cAttributesAssignment_5_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_3_0() { return cAttributesAttributeParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('methods' '{' methods+=Method methods+=Method* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'methods'
		public Keyword getMethodsKeyword_6_0() { return cMethodsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//methods+=Method
		public Assignment getMethodsAssignment_6_2() { return cMethodsAssignment_6_2; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_6_2_0() { return cMethodsMethodParserRuleCall_6_2_0; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_6_3() { return cMethodsAssignment_6_3; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_6_3_0() { return cMethodsMethodParserRuleCall_6_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromClassCrossReference_4_0 = (CrossReference)cFromAssignment_4.eContents().get(0);
		private final RuleCall cFromClassIDTerminalRuleCall_4_0_1 = (RuleCall)cFromClassCrossReference_4_0.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToClassCrossReference_6_0 = (CrossReference)cToAssignment_6.eContents().get(0);
		private final RuleCall cToClassIDTerminalRuleCall_6_0_1 = (RuleCall)cToClassCrossReference_6_0.eContents().get(1);
		private final Keyword cCardinalityKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCardinalityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCardinalityCardinalityParserRuleCall_8_0 = (RuleCall)cCardinalityAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Relation:
		//	'Relation'
		//	name=ID
		//	'{'
		//	'from' from=[Class]
		//	'to' to=[Class]
		//	'cardinality' cardinality=Cardinality
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Relation' name=ID '{' 'from' from=[Class] 'to' to=[Class] 'cardinality' cardinality=Cardinality '}'
		public Group getGroup() { return cGroup; }
		
		//'Relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//from=[Class]
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//[Class]
		public CrossReference getFromClassCrossReference_4_0() { return cFromClassCrossReference_4_0; }
		
		//ID
		public RuleCall getFromClassIDTerminalRuleCall_4_0_1() { return cFromClassIDTerminalRuleCall_4_0_1; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//to=[Class]
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//[Class]
		public CrossReference getToClassCrossReference_6_0() { return cToClassCrossReference_6_0; }
		
		//ID
		public RuleCall getToClassIDTerminalRuleCall_6_0_1() { return cToClassIDTerminalRuleCall_6_0_1; }
		
		//'cardinality'
		public Keyword getCardinalityKeyword_7() { return cCardinalityKeyword_7; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_8() { return cCardinalityAssignment_8; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_8_0() { return cCardinalityCardinalityParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypedValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypedValueTypeCrossReference_2_0 = (CrossReference)cTypedValueAssignment_2.eContents().get(0);
		private final RuleCall cTypedValueTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypedValueTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribute:
		//	name=EString ':' typedValue=[Type] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' typedValue=[Type] ';'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typedValue=[Type]
		public Assignment getTypedValueAssignment_2() { return cTypedValueAssignment_2; }
		
		//[Type]
		public CrossReference getTypedValueTypeCrossReference_2_0() { return cTypedValueTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypedValueTypeIDTerminalRuleCall_2_0_1() { return cTypedValueTypeIDTerminalRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAttributeParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAttributeParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypedValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cReturnTypedValueTypeCrossReference_6_0 = (CrossReference)cReturnTypedValueAssignment_6.eContents().get(0);
		private final RuleCall cReturnTypedValueTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cReturnTypedValueTypeCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Method:
		//	{Method} name=ID '(' (parameters+=Attribute ("," parameters+=Attribute)*)? ')' ':' returnTypedValue=[Type]? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Method} name=ID '(' (parameters+=Attribute ("," parameters+=Attribute)*)? ')' ':' returnTypedValue=[Type]? ';'
		public Group getGroup() { return cGroup; }
		
		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Attribute ("," parameters+=Attribute)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Attribute
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Attribute
		public RuleCall getParametersAttributeParserRuleCall_3_0_0() { return cParametersAttributeParserRuleCall_3_0_0; }
		
		//("," parameters+=Attribute)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Attribute
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Attribute
		public RuleCall getParametersAttributeParserRuleCall_3_1_1_0() { return cParametersAttributeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//returnTypedValue=[Type]?
		public Assignment getReturnTypedValueAssignment_6() { return cReturnTypedValueAssignment_6; }
		
		//[Type]
		public CrossReference getReturnTypedValueTypeCrossReference_6_0() { return cReturnTypedValueTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getReturnTypedValueTypeIDTerminalRuleCall_6_0_1() { return cReturnTypedValueTypeIDTerminalRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Cardinality:
		//	'[' lowerBound=EInt ',' upperBound=EInt ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' lowerBound=EInt ',' upperBound=EInt ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_1_0() { return cLowerBoundEIntParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_3_0() { return cUpperBoundEIntParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEnumerationElementParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueEnumerationElementParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration:
		//	'Enumeration'
		//	name=ID
		//	'{'
		//	value+=EnumerationElement ("," value+=EnumerationElement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Enumeration' name=ID '{' value+=EnumerationElement ("," value+=EnumerationElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//value+=EnumerationElement
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EnumerationElement
		public RuleCall getValueEnumerationElementParserRuleCall_3_0() { return cValueEnumerationElementParserRuleCall_3_0; }
		
		//("," value+=EnumerationElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//value+=EnumerationElement
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//EnumerationElement
		public RuleCall getValueEnumerationElementParserRuleCall_4_1_0() { return cValueEnumerationElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConcreteTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.ConcreteType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcreteTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConcreteTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ConcreteType:
		//	{ConcreteType}
		//	'ConcreteType'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConcreteType} 'ConcreteType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ConcreteType}
		public Action getConcreteTypeAction_0() { return cConcreteTypeAction_0; }
		
		//'ConcreteType'
		public Keyword getConcreteTypeKeyword_1() { return cConcreteTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EnumerationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.alma.uml.smalluml.SmallUml.EnumerationElement");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EnumerationElement:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	
	
	private final PackageElements pPackage;
	private final TypeElements pType;
	private final ClassElements pClass;
	private final RelationElements pRelation;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final AttributeElements pAttribute;
	private final MethodElements pMethod;
	private final CardinalityElements pCardinality;
	private final EIntElements pEInt;
	private final EnumerationElements pEnumeration;
	private final ConcreteTypeElements pConcreteType;
	private final EnumerationElementElements pEnumerationElement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallUmlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPackage = new PackageElements();
		this.pType = new TypeElements();
		this.pClass = new ClassElements();
		this.pRelation = new RelationElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pAttribute = new AttributeElements();
		this.pMethod = new MethodElements();
		this.pCardinality = new CardinalityElements();
		this.pEInt = new EIntElements();
		this.pEnumeration = new EnumerationElements();
		this.pConcreteType = new ConcreteTypeElements();
		this.pEnumerationElement = new EnumerationElementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.alma.uml.smalluml.SmallUml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Package:
	//	{Package} (class+=Class ';')* (relation+=Relation ';')* (types+=Type ';')*;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Type:
	//	Enumeration | ConcreteType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Class:
	//	isAbstract?='Abstract'?
	//	'Class'
	//	name=ID ('extends' parents+=[Class] ("," parents+=[Class])*)?
	//	'{' ('attributes' '{' attributes+=Attribute attributes+=Attribute* '}')? ('methods' '{' methods+=Method
	//	methods+=Method* '}')?
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Relation:
	//	'Relation'
	//	name=ID
	//	'{'
	//	'from' from=[Class]
	//	'to' to=[Class]
	//	'cardinality' cardinality=Cardinality
	//	'}';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Attribute:
	//	name=EString ':' typedValue=[Type] ';';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Method:
	//	{Method} name=ID '(' (parameters+=Attribute ("," parameters+=Attribute)*)? ')' ':' returnTypedValue=[Type]? ';';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Cardinality:
	//	'[' lowerBound=EInt ',' upperBound=EInt ']';
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Enumeration:
	//	'Enumeration'
	//	name=ID
	//	'{'
	//	value+=EnumerationElement ("," value+=EnumerationElement)*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//ConcreteType:
	//	{ConcreteType}
	//	'ConcreteType'
	//	name=EString;
	public ConcreteTypeElements getConcreteTypeAccess() {
		return pConcreteType;
	}
	
	public ParserRule getConcreteTypeRule() {
		return getConcreteTypeAccess().getRule();
	}
	
	//EnumerationElement:
	//	value=ID;
	public EnumerationElementElements getEnumerationElementAccess() {
		return pEnumerationElement;
	}
	
	public ParserRule getEnumerationElementRule() {
		return getEnumerationElementAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
